|||\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\|||
|||--------------------------------------------------------------------------------------------------------------------------------------------------------------------|||
|||------------------------------------------------------------------------ APIREST EN NODEJS -------------------------------------------------------------------------|||
|||--------------------------------------------------------------------------------------------------------------------------------------------------------------------|||
|||\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\|||
|||                                                                                                                                                                    |||
||| --  01. ENTORNO DE DESARROLLO                                                                                                                                      |||
||| --  02. ESTRUCTURA DEL PROYECTO                                                                                                                                    |||
||| --  03. BASE DE DATOS                                                                                                                                              |||
||| --  04. CÓDIGO DEL PROYECTO                                                                                                                                        |||
||| --  05. PRUEBAS DE LA API CON POSTMAN                                                                                                                              |||
|||                                                                                                                                                                    |||
||| --  ANEXOS: TENER EN CUENTA                                                                                                                                        |||
||| --          AX_01.  Subir el Proyecto a Github                                                                                                                     |||
||| --          AX_02.  Clonar un proyecto de Github                                                                                                                   |||
||| --          AX_03.  Cambiar los puertos de 'Apache' en 'XAMPP'                                                                                                     |||
||| --          AX_04.  Cambiar los puertos de 'MySQL' en 'XAMPP'                                                                                                      |||
||| --          AX_05.  Puesta en Marcha del Proyecto                                                                                                                  |||
|||                                                                                                                                                                    |||
|||\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\|||
|||                                                                                                                                                                    |||
||| --  01. ENTORNO DE DESARROLLO                                                                                                                                      |||
||| --      01.01.  Instalar Visual Studio Code                                                                                                                        |||
||| --      01.02.  Instalar Node Js                                                                                                                                   |||
||| --      01.03.  Modificar Directivas en PowerShell                                                                                                                 |||
||| --      01.04.  Instalar Git                                                                                                                                       |||
||| --      01.05.  Crear cuenta en 'Github'                                                                                                                           |||
||| --      01.06.  Instalar XAMPP                                                                                                                                     |||
||| --      01.07.  Instalar Postman                                                                                                                                   |||
||| --  02. ESTRUCTURA DEL PROYECTO                                                                                                                                    |||
||| --      02.01.  Crear la carpeta raíz del proeycto                                                                                                                 |||
||| --      02.02.  Crear el archivo para manejar las dependencias 'package.json'                                                                                      |||
||| --      02.03.  Instalar dependencias en el 'backend/'                                                                                                             |||
||| --      02.04.  Crear la estructura de carpetas y los archivos del proyecto                                                                                        |||
||| --  03. BASE DE DATOS                                                                                                                                              |||
||| --      03.01.  Codificar la base de datos 'database/db_node.sql'                                                                                                  |||
||| --      03.02.  Ejecutar la base de datos 'database/db_node.sql'                                                                                                   |||
||| --  04. CÓDIGO DEL PROYECTO                                                                                                                                        |||
||| --      04.01.  Codificar los valores de la cadena de conexión a la base de datos en 'backend/.env'                                                                |||
||| --      04.02.  Codificar la cadena de conexión en 'backend/config/config.js'                                                                                      |||
||| --      04.03.  Codificar el modelo usuarios en 'backend/models/user.js'                                                                                           |||
||| --      04.04.  Codificar la key en 'backend/config/keys.js'                                                                                                       |||
||| --      04.05.  Codificar el Jason Web Token con la key en 'backend/config/passport.js'                                                                            |||
||| --      04.06.  Codificar la API de usuarios en 'backend/controllers/userController.js'                                                                            |||
||| --      04.07.  Codificar la autenticación por JWT y Roles en 'backend/middlewares/authMiddleware.js'                                                              |||
||| --      04.08.  Codificar la ruta de usuario en 'backend/routes/userRoutes.js'                                                                                     |||
||| --      04.09.  Codificar el servidor en 'backend/server.js'                                                                                                       |||
||| --      04.10.  Codificar el inicio del backend en 'backend/index.js'                                                                                              |||
||| --      04.11.  Ejecutar el backend                                                                                                                                |||
||| --  05. PRUEBAS DE LA API CON POSTMAN                                                                                                                              |||
||| --      05.01.  Crear la Colección 'USUARIOS'                                                                                                                      |||
||| --      05.02.  Crear los métodos HTTP (GET, POST, PUT, DELETE) de la Colección 'USUARIOS'                                                                         |||
||| --      05.03.  Configurar 'GET raiz'                                                                                                                              |||
||| --      05.04.  Configurar 'POST userCreate'                                                                                                                       |||
||| --      05.05.  Configurar 'POST login'                                                                                                                            |||
||| --      05.06.  Configurar 'GET usersAll'                                                                                                                          |||
||| --      05.07.  Configurar 'GET userById'                                                                                                                          |||
||| --      05.08.  Configurar 'POST userUpdate'                                                                                                                       |||
||| --      05.09.  Configurar 'DELETE userDelete'                                                                                                                     |||
|||                                                                                                                                                                    |||
|||\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\|||



|||\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\|||
|||--------------------------------------------------------------------------------------------------------------------------------------------------------------------|||
|||-------------------------------------------------------------------- 01. ENTORNO DE DESARROLLO ---------------------------------------------------------------------|||
|||--------------------------------------------------------------------------------------------------------------------------------------------------------------------|||
|||\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\|||

|------------------------------------------------------------------------------------------------------------------------------------------------------------------------|
|-- 01.01.  Instalar Visual Studio Code: --------------------------------------------------------------------------------------------------------------------------------|
|------------------------------------------------------------------------------------------------------------------------------------------------------------------------|

            01. Descargar 'Visual Studio Code': https://code.visualstudio.com/download.

            02. Instalar Visual Studio Code.

                    ⦿  En el asistente de instalación dejar marcado:   ☑ 'Agregar PATH…'.                    

            03. Abrir Visual Studio Code.

            04. Instalar las siguientes extensiones en Visual Studio Code:

                    ⦿  Material Icon Theme                    
                    ⦿  Live Server  

|------------------------------------------------------------------------------------------------------------------------------------------------------------------------|
|-- 01.02.  Instalar Node Js: -------------------------------------------------------------------------------------------------------------------------------------------|
|------------------------------------------------------------------------------------------------------------------------------------------------------------------------|

            01. Descargar 'node.js': https://nodejs.org/es/.

            02. Instalar node.js.


|------------------------------------------------------------------------------------------------------------------------------------------------------------------------|
|-- 01.03.  Modificar Directivas en PowerShell: -------------------------------------------------------------------------------------------------------------------------|
|------------------------------------------------------------------------------------------------------------------------------------------------------------------------|

            01. Abrir el PowerShell de Windows
            
            02. Ejecutar el siguiente comando

                    ⦿  PS C:\..\..> Get-ExecutionPolicy
                    ⦿  Restricted

            03. Si aparece 'Restricted', hay que cambiarla a 'Unrestricted' de la siguiente forma:

                    ⦿  PS C:\..\..> Set-ExecutionPolicy -Scope CurrentUser

                        cmdlet Set-ExecutionPolicy en la posición 1 de la canalización de comandos
                        Proporcione valores para los parámetros siguientes:
                        ExecutionPolicy: Unrestricted

            04. Verificar la versión de 'node' y 'npm':

                    ⦿  PS C:\..\..> node --version
                    ⦿  PS C:\..\..> npm --version

|------------------------------------------------------------------------------------------------------------------------------------------------------------------------|
|-- 01.04.  Instalar Git: -----------------------------------------------------------------------------------------------------------------------------------------------|
|------------------------------------------------------------------------------------------------------------------------------------------------------------------------|

            01. Descargar 'XAMPP': https://www.apachefriends.org/es/download.html.

            02. Instalar Git.

|------------------------------------------------------------------------------------------------------------------------------------------------------------------------|
|-- 01.05.  Crear cuenta en 'Github': -----------------------------------------------------------------------------------------------------------------------------------|
|------------------------------------------------------------------------------------------------------------------------------------------------------------------------|

            01. Descargar 'XAMPP': https://www.apachefriends.org/es/download.html.

            02. Seguir los pasos de creación de la cuenta.


|------------------------------------------------------------------------------------------------------------------------------------------------------------------------|
|-- 01.06.  Instalar XAMPP: ---------------------------------------------------------------------------------------------------------------------------------------------|
|------------------------------------------------------------------------------------------------------------------------------------------------------------------------|

            01. Descargar 'XAMPP': https://www.apachefriends.org/es/download.html.

            02. Instalar XAMPP.

            03. Abrir el 'XAMPP Control Panel' y ejecutar los servicios de 'Apache' y 'MySQL'.

                ┌ --------------------------------------------------------------------------------------------------------------------------------------- ┐
                |                                                                                                                                         |
                  NOTA:   
                    
                    ⦿  Verificar que los puertos sean: En Apache (:80) y de MySQL (:3306).
                |                                                                                                                                         |
                └ --------------------------------------------------------------------------------------------------------------------------------------- ┘


|------------------------------------------------------------------------------------------------------------------------------------------------------------------------|
|-- 01.07.  Instalar Postman: -------------------------------------------------------------------------------------------------------------------------------------------|
|------------------------------------------------------------------------------------------------------------------------------------------------------------------------|

            01. Descargar 'Postman': https://www.postman.com/downloads/. Este programa nos sirve para realizar probar las peticiones HTTP.

            02. Instalar Postman.
            
            03. Abrir Postman.


|||\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\|||
|||--------------------------------------------------------------------------------------------------------------------------------------------------------------------|||
|||------------------------------------------------------------------- 02. ESTRUCTURA DEL PROYECTO --------------------------------------------------------------------|||
|||--------------------------------------------------------------------------------------------------------------------------------------------------------------------|||
|||\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\|||

|------------------------------------------------------------------------------------------------------------------------------------------------------------------------|
|-- 02.01.  Crear la carpeta raíz del proeycto: -------------------------------------------------------------------------------------------------------------------------|
|------------------------------------------------------------------------------------------------------------------------------------------------------------------------|

            01. En cualquier parte del computador (Se sugiere en el Escritorio de Windows), crear la carpeta 'proyecto'
            
            02. En el interior de la carpeta 'proyecto', crear dos más 'backend' y 'database'
            
            03. Abrir la carpeta 'proyecto' con 'Visual Studio Code'

|------------------------------------------------------------------------------------------------------------------------------------------------------------------------|
|-- 02.02.  Crear el archivo para manejar las dependencias 'package.json': ----------------------------------------------------------------------------------------------|
|------------------------------------------------------------------------------------------------------------------------------------------------------------------------|

            01. Abrir una terminal en Visual Studio Code ('Terminal / New Terminal' ó 'Ctrl + Shift + ñ')

            02. Cambiar el nombre de la terminal a 'backend', seleccionándola en la parte inferior derecha y presionando F2 / Rename...
            
            03. Cambiar el color de la terminal 'backend', dando click derecho / Chage Color... / Seleccionar el color
            
            04. En la Terminal de 'Visual Studio Code' digitar lo siguiente:

                    ⦿  PS C:\..\..> cd backend
                    ⦿  PS C:\..\backend> npm init

                        This utility will walk you through creating a package.json file.
                        It only covers the most common items, and tries to guess sensible defaults.

                        See `npm help init` for definitive documentation on these fields
                        and exactly what they do.

                        Use `npm install <pkg>` afterwards to install a package and
                        save it as a dependency in the package.json file.

                        Press ^C at any time to quit.
                        package name: (backend) mi-api-node
                        version: (1.0.0)
                        description: API en Node.js con Express y JWT
                        entry point: (index.js)
                        test command:
                        git repository:
                        keywords: NodeJs
                        author: Albeiro Ramos
                        license: (ISC) MIT
                        About to write to C:\Users\Instructor\Documents\_albe_\react_native\backend\package.json:

                        {
                          "name": "mi-api-node",
                          "version": "1.0.0",
                          "description": "API en Node.js con Express y JWT",
                          "main": "index.js",
                          "scripts": {
                            "test": "echo \"Error: no test specified\" && exit 1"
                          },
                          "keywords": [
                            "NodeJs"
                          ],
                          "author": "Instructor Albeiro Ramos",
                          "license": "MIT"
                        }

                        Is this OK? (yes) yes

            05. Modificar el archivo 'package.json' en la línea 8, quedando así:
            
                      1    {
                      2      "name": "mi-api-node",
                      3      "version": "1.0.0",
                      4      "description": "API en Node.js con Express y JWT",
                      5      "main": "index.js",
                      6      "scripts": {
                      7        "test": "echo \"Error: no test specified\" && exit 1",
                      8        "start": "node index.js"
                      9      },
                     10      "keywords": [
                     11        "NodeJs"
                     12      ],
                     13      "author": "Albeiro Ramos",
                     14      "license": "MIT"
                     15    }

|------------------------------------------------------------------------------------------------------------------------------------------------------------------------|
|-- 02.03.  Instalar dependencias en el 'backend/': ---------------------------------------------------------------------------------------------------------------------|
|------------------------------------------------------------------------------------------------------------------------------------------------------------------------|

                    ⦿  PS C:\..\backend> npm i bcryptjs@3.0.2
                    ⦿  PS C:\..\backend> npm i cors@2.8.5
                    ⦿  PS C:\..\backend> npm i dotenv
                    ⦿  PS C:\..\backend> npm i express@4.21.2
                    ⦿  PS C:\..\backend> npm i http@0.0.1-security
                    ⦿  PS C:\..\backend> npm i jsonwebtoken@9.0.2
                    ⦿  PS C:\..\backend> npm i morgan@1.10.0
                    ⦿  PS C:\..\backend> npm i mysql@2.18.1
                    ⦿  PS C:\..\backend> npm i passport@0.4.1
                    ⦿  PS C:\..\backend> npm i passport-jwt@4.0.1
                    ⦿  PS C:\..\backend> npm audit fix
                    ⦿  PS C:\..\backend> npm audit fix --force

|------------------------------------------------------------------------------------------------------------------------------------------------------------------------|
|-- 02.04.  Crear la estructura de carpetas y los archivos del proyecto: ------------------------------------------------------------------------------------------------|
|------------------------------------------------------------------------------------------------------------------------------------------------------------------------|                                                                                                                                                      
                                                                                                                                                      
                                                                                                                                                      # C = Carpetas
                                                                                                                                                      # A = Archivos

                        proyecto/                                             # C. Backend y Frontend de un proyecto software (web o móvil).
                        ├── backend/                                          # C. Lógica del servidor Node.js para la gestión de datos y API.
                        │   ├── config/                                       # C. Configuración del backend (base de datos, claves, autenticación).
                        │   │   ├── config.js                                 # A. Configuración principal del backend (variables de entorno, BD, etc.).
                        │   │   ├── keys.js                                   # A. Claves secretas para seguridad (JWT, OAuth, servicios externos).
                        │   │   └── passport.js                               # A. Configuración de la estrategia de autenticación con Passport.js.
                        │   ├── controllers/                                  # C. Manejan la lógica de negocio y conexión entre rutas y modelos.
                        │   │   └── userController.js                         # A. Controlador para las operaciones relacionadas con los usuarios (CRUD, login).
                        │   ├── middlewares/                                  # C. Funciones que interceptan las peticiones HTTP (autenticación, validaciones).
                        │   │   └── authMiddleware.js                         # A. Middleware para verificar autenticación/autorización de usuarios.
                        │   ├── models/                                       # C. Definición de modelos de datos que representan tablas en la base de datos.
                        │   │   └── user.js                                   # A. Esquema del modelo de usuario (campos, validaciones, consultas SQL).
            (NO CREAR)  │   ├── node_modules/                                 # C. Dependencias externas instaladas vía NPM.
                        │   ├── routes/                                       # C. Define las rutas de la API que conectan con los controladores.
                        │   │   └── userRoutes.js                             # A. Endpoints relacionados con usuarios (registro, login, CRUD).
                        │   ├── .env                                          # A. Cadena de conexión a la base de datos.
                        │   ├── index.js                                      # A. Punto principal de entrada del backend. Carga 'server.js' y arranca la app.
            (NO CREAR)  │   ├── package-lock.json                             # A. Versiones exactas de las dependencias instaladas.
            (NO CREAR)  │   ├── package.json                                  # A. Manifest del backend (nombre del proyecto, scripts, dependencias).
                        │   └── server.js                                     # A. Configuración del servidor Express (middlewares, rutas, DB, etc.).
                        └── database/                                         # C. Archivos relacionados con la base de datos.
                            └── db_node.sql                                   # A. Script SQL para crear y poblar la base de datos del proyecto.



|||\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\|||
|||--------------------------------------------------------------------------------------------------------------------------------------------------------------------|||
|||------------------------------------------------------------------------ 03. BASE DE DATOS -------------------------------------------------------------------------|||
|||--------------------------------------------------------------------------------------------------------------------------------------------------------------------|||
|||\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\|||

|------------------------------------------------------------------------------------------------------------------------------------------------------------------------|
|-- 03.01. Codificar la base de datos 'database/db_node.sql': -----------------------------------------------------------------------------------------------------------|
|------------------------------------------------------------------------------------------------------------------------------------------------------------------------|

                      1    DROP DATABASE IF EXISTS db_node;
                      2
                      3    CREATE SCHEMA db_node DEFAULT CHARACTER SET utf8 ;
                      4    USE db_node;
                      5
                      6    CREATE TABLE users (
                      7      id INT AUTO_INCREMENT PRIMARY KEY,
                      8      name VARCHAR(100) NOT NULL,
                      9      lastname VARCHAR(100) NOT NULL,
                     10      email VARCHAR(150) NOT NULL UNIQUE,
                     11      password VARCHAR(255) NOT NULL,
                     12      phone VARCHAR(20),
                     13      image VARCHAR(255),
                     14      role VARCHAR(20),
                     15      created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                     16      updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP
                     17    ) ENGINE=InnoDB;
                     18
                     19    INSERT INTO users VALUES (
                     20      null,
                     21      "Albeiro",
                     22      "Ramos",
                     23      "profealbeiro2020@gmail.com",
                     24      "$2b$10$NR8eRuuAB12JoHe81ZYnG.i2/5k/D5TKrxc7Pk74W4rgzADdABM9G",
                     25      "3103103101",
                     26      "profile",
                     27      "admin",
                     28      null,
                     29      null
                     30    );

                ┌ --------------------------------------------------------------------------------------------------------------------------------------- ┐
                |                                                                                                                                         |
                  EXPLICACIÓN: 

                    ⦿    Este script crea una base de datos MySQL llamada db_node, define una tabla users con varios campos relevantes para un sistema de autenticación, 
                         e inserta un usuario de ejemplo con rol de administrador.   
                |---------------------------------------------------------------------------------------------------------------------------------------- |
                
                    A.   se elimina una base de datos, si existe 
                    B.   se crea un esquema de base de datos
                    C.   se usa el esquema de base de datos
                    D.   se crea una tabla de usuarios
                    E.   se insertan datos en la tabla de usuarios
                        utilizando 8 campos (id, nombre, apellido, email, password, telefono, image, rol, fecha_creacion , fecha_actualizacion)

                |                                                                                                                                         |
                └ --------------------------------------------------------------------------------------------------------------------------------------- ┘


|------------------------------------------------------------------------------------------------------------------------------------------------------------------------|
|-- 03.02. Ejecutar la base de datos 'database/db_node.sql': ------------------------------------------------------------------------------------------------------------|
|------------------------------------------------------------------------------------------------------------------------------------------------------------------------|

            01. Abrir el navegador y escribir http://localhost/phpmyadmin/
            
            02. Dar click en 'Importar'
            
            03. Dar click en 'Seleccionar archivo'
            
            04. Seleccionar el archivo 'C:\..\..\proyecto\database\db_node.sql'
            
            05. Dar click en 'Importar'



|||\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\|||
|||--------------------------------------------------------------------------------------------------------------------------------------------------------------------|||
|||--------------------------------------------------------------------- 04. CÓDIGO DEL PROYECTO ----------------------------------------------------------------------|||
|||--------------------------------------------------------------------------------------------------------------------------------------------------------------------|||
|||\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\|||


|------------------------------------------------------------------------------------------------------------------------------------------------------------------------|
|-- 04.01.  Codificar los valores de la cadena de conexión a la base de datos en 'backend/.env': ------------------------------------------------------------------------|
|------------------------------------------------------------------------------------------------------------------------------------------------------------------------|

                      1     DB_HOST=localhost
                      2     DB_USER=root
                      3     DB_PASSWORD=
                      4     DB_NAME=db_node
                      5     DB_PORT=3306
                      6
                      7     JWT_SECRET=e9f94f8d3a1e6d7c2b3f9e5a7c8d4f2b7a0e1d3c4f5b6a7e9f8d0c3b4a6d2e1

                ┌ --------------------------------------------------------------------------------------------------------------------------------------- ┐
                |                                                                                                                                         |
                  EXPLICACIÓN:   
                    
                    ⦿  el archivo .env contienen información  como credenciales de base de datos y claves secretas.
                        que permiten configurar la aplicación sin exponer datos sensibles (contraseñas) directamente en el código fuente.
                  

                |---------------------------------------------------------------------------------------------------------------------------------------- |
                
                    A.  Dirección del servidor de base de datos. En este caso, el servidor está en la misma máquina (localhost).
                    B.  Usuario con el que se accede a la base de datos. root es el administrador por defecto en MySQL 
                    C.  Contraseña del usuario de base de datos. En este caso está vacía.  
                    D.  Nombre de la base de datos que se usará en el proyecto.
                    E.  Puerto estándar de MySQL.
                    F.  Clave secreta para generar y verificar tokens JWT (JSON Web Token).                                                |
                └ --------------------------------------------------------------------------------------------------------------------------------------- ┘

|------------------------------------------------------------------------------------------------------------------------------------------------------------------------|
|-- 04.02.  Codificar la cadena de conexión en 'backend/config/config.js': ----------------------------------------------------------------------------------------------|
|------------------------------------------------------------------------------------------------------------------------------------------------------------------------|

                      1     require('dotenv').config();
                      2     const mysql = require('mysql');
                      3     const db = mysql.createConnection({
                      4         host: process.env.DB_HOST,
                      5         user: process.env.DB_USER,
                      6         password: process.env.DB_PASSWORD,
                      7         database: process.env.DB_NAME,
                      8         port: process.env.DB_PORT
                      9     });
                     10     db.connect(function(err) {
                     11         if (err) throw err;
                     12         console.log('Base de datos conectada')
                     13     });
                     14     module.exports = db;

                ┌ --------------------------------------------------------------------------------------------------------------------------------------- ┐
                |                                                                                                                                         |
                  EXPLICACIÓN:   
                    
                    ⦿   Configura la conexión a una base de datos MySQL utilizando el módulo mysql y variables de entorno almacenadas en un archivo .env.
                         Esto permite proteger datos sensibles, como contraseñas y nombres de usuario.

                |---------------------------------------------------------------------------------------------------------------------------------------- |
                
                    A.   Carga las variables de entorno definidas en el archivo .env al entorno de Node.js (process.env).
                    B.   Importa el módulo mysql, que permite conectar Node.js con una base de datos MySQL.
                    C.   Crea una conexión a la base de datos utilizando las variables de entorno para los parámetros de conexión (host, usuario, contraseña, nombre de la base de datos y puerto).
                    D.   Establece la conexión. Si ocurre un error, se lanza una excepción. Si la conexión es exitosa, se imprime un mensaje en la consola.

                |                                                                                                                                         |
                └ --------------------------------------------------------------------------------------------------------------------------------------- ┘


|------------------------------------------------------------------------------------------------------------------------------------------------------------------------|
|-- 04.03.  Codificar el modelo usuarios en 'backend/models/user.js': ---------------------------------------------------------------------------------------------------|
|------------------------------------------------------------------------------------------------------------------------------------------------------------------------|


                     ┌ --------------------------------------------------------------------------------------------------------------------------------------- ┐
                |                                                                                                                                         |
                  EXPLICACIÓN:   
                    
                    ⦿  Este archivo define el modelo de usuarios  utilizando MySQL como base de datos y bcryptjs para encriptación de contraseñas.
                        Contiene todas las funciones básicas para interactuar con la tabla users: listar, buscar, crear, actualizar y eliminar usuarios.

                |---------------------------------------------------------------------------------------------------------------------------------------- |
                      1     const db = require('../config/config');
                      2     const bcrypt = require('bcryptjs');
                      3     const User = {};

                      Le estás diciendo a tu código:
                      Trae la configuración de la base de datos para poder enviar consultas SQL (leer, insertar, actualizar o eliminar datos).

                      Carga el archivo que está en la carpeta config, que se encuentra un nivel arriba (../), y que se llama config.js.
                       En Node.js, require() se usa para importar módulos o archivos.
                       Puede ser un módulo interno de Node, uno externo (como bcrypt o express), o un archivo que tú mismo hayas creado.


                          A.   Importa el objeto o módulo de configuración de la base de datos, que proporciona el método para ejecutar consultas (db.query).
                    B.   El modelo proporciona tres métodos para consultar usuarios, manteniendo un estricto control sobre la exposición de datos sensibles:
                                                                                                                                    |
                └ --------------------------------------------------------------------------------------------------------------------------------------- ┘
                      4
                      5     User.findAll = (result) => {
                      6         const sql = `SELECT id, email, name, lastname, phone, image, role, created_at, updated_at FROM users`;
                      7         db.query(sql, (err, users) => {
                      8             if (err) {
                      9                 console.log('Error al listar usuarios: ', err);
                     10                 result(err, null);
                     11             } else {
                     12                 console.log('Usuarios encontrados: ', users.length);
                     13                 result(null, users);
                     14             }   
                     15         });
                     16     };
                          
                          Esta función se conecta a la base de datos, ejecuta una consulta SQL que trae todos los usuarios, y luego devuelve esos datos (o un error si algo falla)


                     17
                     18     User.findById = (id, result) => {
                     19         const sql = `SELECT id, email, name, lastname, image, phone, role, password FROM users WHERE id = ?`;
                     20         db.query(sql, [id], (err, user) => {
                     21             if (err) {
                     22                 console.log('Error al consultar: ', err);
                     23                 result(err, null);
                     24             }
                     25             else {
                     26                 console.log('Usuario consultado: ',  user[0] );
                     27                 result(null, user[0]);
                     28             }
                     29         });
                     30     };
                     31
                     32     User.findByEmail = (email, result) => {
                     33         const sql = `SELECT id, email, name, lastname, image, phone, role, password FROM users WHERE email = ?`;
                     34         db.query(sql, [email], (err, user) => {
                     35             if (err) {
                     36                 console.log('Error al consultar: ', err);
                     37                 result(err, null);
                     38             }
                     39             else {
                     40                 console.log('Usuario consultado: ',  user[0] );
                     41                 result(null, user[0]);
                     42             }
                     43         });
                     44     };
                     45
                     46     User.create = async (user, result) => {
                     47         const hash = await bcrypt.hash(user.password, 10)  
                     48         const validRoles = ['admin', 'seller', 'customer', 'user'];
                     49         const role = validRoles.includes(user.role) ? user.role : 'user';
                     50         const sql = `INSERT INTO users(
                     51                         name, 
                     52                         lastname,   
                     53                         email, 
                     54                         password,
                     55                         phone,
                     56                         image,
                     57                         role,
                     58                         created_at,
                     59                         updated_at
                     60                     ) VALUES (?,?,?,?,?,?,?,?,?)`;
                     61         db.query(sql,
                     62             [
                     63                 user.name,
                     64                 user.lastname,
                     65                 user.email,
                     66                 hash,
                     67                 user.phone,
                     68                 user.image,
                     69                 role,
                     70                 new Date(),
                     71                 new Date()
                     72             ], (err, res) => {
                     73                 if (err) {
                     74                     console.log('Error al crear al Usuario: ', err);
                     75                     result(err, null);
                     76                 } else {
                     77                     console.log('Usuario creado: ', {id: res.insertId, ...user});
                     78                     result(null, {id: res.insertId, ...user});
                     79                 }
                     80             }
                     81         );
                     82     };
                     83
                     84     User.update = async (user, result) => {
                     85         let fields = [];
                     86         let values = [];
                     87
                     88         if (user.password) {
                     89             const hash = await bcrypt.hash(user.password, 10);
                     90             fields.push("password = ?");
                     91             values.push(hash);
                     92         }
                     93
                     94         if (user.email) {
                     95             fields.push("email = ?");
                     96             values.push(user.email);
                     97         }
                     98         if (user.name) {
                     99             fields.push("name = ?");
                    100             values.push(user.name);
                    101         }
                    102         if (user.lastname) {
                    103             fields.push("lastname = ?");
                    104             values.push(user.lastname);
                    105         }
                    106         if (user.phone) {
                    107             fields.push("phone = ?");
                    108             values.push(user.phone);
                    109         }
                    110         if (user.image) {
                    111             fields.push("image = ?");
                    112             values.push(user.image);
                    113         }
                    114         if (user.role) {
                    115             fields.push("role = ?");
                    116             values.push(user.role);
                    117         }
                    118
                    119         fields.push("updated_at = ?");
                    120         values.push(new Date());
                    121
                    122         const sql = `UPDATE users SET ${fields.join(", ")} WHERE id = ?`;
                    123         values.push(user.id);
                    124
                    125         db.query(sql, values, (err, res) => {
                    126             if (err) {
                    127                 console.log('Error al actualizar usuario: ', err);
                    128                 result(err, null);
                    129             } else {
                    130                 console.log('Usuario actualizado: ', { id: user.id, ...user });
                    131                 result(null, { id: user.id, ...user });
                    132             }
                    133         });
                    134     };
                    135
                    136     User.delete = (id, result) => {
                    137         const sql = `DELETE FROM users WHERE id = ?`;
                    138         db.query(sql, [id], (err, res) => {
                    139             if (err) {
                    140                 console.log('Error al eliminar usuario: ', err);
                    141                 result(err, null);
                    142             } else {
                    143                 console.log('Usuario eliminado con id: ', id);
                    144                 result(null, res);
                    145             }
                    146         });
                    147     };
                    148
                    149     module.exports = User;

                
                
                

|------------------------------------------------------------------------------------------------------------------------------------------------------------------------|
|-- 04.04.  Codificar la key en 'backend/config/keys.js': ---------------------------------------------------------------------------------------------------------------|
|------------------------------------------------------------------------------------------------------------------------------------------------------------------------|

            01. Ingrese a la siguiente página: https://www.vondy.com/random-key-generator--ZzGGMYgS?lc=5 (o en alguna página que genere códigos de 256
                bit de forma aleatoria) para generar una clave de 256 bits; cópiela y péguela en el archivo 'backend/config/keys.js', quedando de la 
                siguiente forma:

                      1     require('dotenv').config();
                      2
                      3     module.exports = {
                      4         secretOrKey: process.env.JWT_SECRET
                      5     };

                ┌ --------------------------------------------------------------------------------------------------------------------------------------- ┐
                |                                                                                                                                         |
                  EXPLICACIÓN:   
                    
                    ⦿  XXXXXXXXXXXXXXXXXXXXXXXXXXXXX.

                |---------------------------------------------------------------------------------------------------------------------------------------- |
                
                    A.   XXXXXXXXXXXXXXXXXXXXXXXXXXXXX.
                    B.   XXXXXXXXXXXXXXXXXXXXXXXXXXXXX.
                |                                                                                                                                         |
                └ --------------------------------------------------------------------------------------------------------------------------------------- ┘
                    
|------------------------------------------------------------------------------------------------------------------------------------------------------------------------|
|-- 04.05.  Codificar el Jason Web Token con la key en 'backend/config/passport.js': ------------------------------------------------------------------------------------|
|------------------------------------------------------------------------------------------------------------------------------------------------------------------------|

                      1     const JwtStrategy = require('passport-jwt').Strategy;
                      2     const ExtractJwt = require('passport-jwt').ExtractJwt;
                      3     const passport = require('passport');
                      4     const Keys = require('./keys');
                      5     const User = require('../models/user');
                      6
                      7     const opts = {
                      8         jwtFromRequest: ExtractJwt.fromAuthHeaderAsBearerToken(),
                      9         secretOrKey: Keys.secretOrKey
                     10     };
                     11
                     12     passport.use(new JwtStrategy(opts, (jwt_payload, done) => {
                     13         User.findById(jwt_payload.id, (err, user) => {
                     14             if (err) {
                     15                 return done(err, false);
                     16             }
                     17             if (user) {
                     18                 return done(null, user);
                     19             }
                     20             else{
                     21                 return done(null, false);
                     22             }
                     23         });
                     24     }));
                     25
                     26     module.exports = passport;

                ┌ --------------------------------------------------------------------------------------------------------------------------------------- ┐
                |                                                                                                                                         |
                  EXPLICACIÓN:   
                    
                    ⦿  XXXXXXXXXXXXXXXXXXXXXXXXXXXXX.

                |---------------------------------------------------------------------------------------------------------------------------------------- |
                
                    A.   XXXXXXXXXXXXXXXXXXXXXXXXXXXXX.
                    B.   XXXXXXXXXXXXXXXXXXXXXXXXXXXXX.
                |                                                                                                                                         |
                └ --------------------------------------------------------------------------------------------------------------------------------------- ┘

|------------------------------------------------------------------------------------------------------------------------------------------------------------------------|
|-- 04.06.  Codificar la API de usuarios en 'backend/controllers/userController.js': ------------------------------------------------------------------------------------|
|------------------------------------------------------------------------------------------------------------------------------------------------------------------------|

                      1     const User = require('../models/user');
                      2     const bcrypt = require('bcryptjs');
                      3     const jwt = require('jsonwebtoken');
                      4     const keys = require('../config/keys');
                      5
                      6     module.exports = {
                      7         login(req, res) {
                      8             const email = req.body.email;
                      9             const password = req.body.password;
                     10
                     11             User.findByEmail(email, async (err, myUser) => {
                     12                 if (err) {
                     13                     return res.status(501).json({
                     14                         success: false,
                     15                         message: 'Error al consultar el usuario',
                     16                         error: err
                     17                     });
                     18                 }
                     19
                     20                 if (!myUser) {
                     21                     return res.status(401).json({
                     22                         success: false,
                     23                         message: 'El email no existe en la base de datos'
                     24                     });
                     25                 }
                     26
                     27                 const isPasswordValid = await bcrypt.compare(password, myUser.password);
                     28
                     29                 if (isPasswordValid) {
                     30                     const token = jwt.sign(
                     31                         { id: myUser.id, email: myUser.email, role: myUser.role },
                     32                         keys.secretOrKey,
                     33                         { expiresIn: '1h' }
                     34                     );
                     35
                     36                     const data = {
                     37                         id: myUser.id,
                     38                         email: myUser.email,
                     39                         name: myUser.name,
                     40                         lastname: myUser.lastname,
                     41                         image: myUser.image,
                     42                         phone: myUser.phone,
                     43                         role: myUser.role,
                     44                         session_token: `JWT ${token}`
                     45                     };
                     46
                     47                     return res.status(201).json({
                     48                         success: true,
                     49                         message: 'Usuario autenticado',
                     50                         data: data
                     51                     });
                     52                 } else {
                     53                     return res.status(401).json({
                     54                         success: false,
                     55                         message: 'Contraseña o correo incorrecto'
                     56                     });
                     57                 }
                     58             });
                     59         },
                     60
                     61         getAllUsers(req, res) {
                     62             User.findAll((err, users) => {
                     63                 if (err) {
                     64                     return res.status(501).json({
                     65                         success: false,
                     66                         message: 'Error al listar usuarios',
                     67                         error: err
                     68                     });
                     69                 }
                     70                 return res.status(200).json({
                     71                     success: true,
                     72                     message: 'Lista de usuarios',
                     73                     data: users
                     74                 });
                     75             });
                     76         },
                     77
                     78         getUserById(req, res) {
                     79             const id = req.params.id;
                     80             User.findById(id, (err, user) => {
                     81                 if (err) {
                     82                     return res.status(501).json({
                     83                         success: false,
                     84                         message: 'Error al consultar el usuario',
                     85                         error: err
                     86                     });
                     87                 }
                     88                 if (!user) {
                     89                     return res.status(404).json({
                     90                         success: false,
                     91                         message: 'Usuario no encontrado'
                     92                     });
                     93                 }
                     94                 return res.status(200).json({
                     95                     success: true,
                     96                     message: 'Usuario encontrado',
                     97                     data: user
                     98                 });
                     99             });
                    100         },
                    101
                    102         register(req, res) {
                    103             const user = req.body;
                    104
                    105             if (!user.role) {
                    106                 user.role = 'user';
                    107             }
                    108
                    109             User.create(user, (err, data) => {
                    110                 if (err) {
                    111                     return res.status(501).json({
                    112                         success: false,
                    113                         message: 'Error al crear al usuario',
                    114                         error: err
                    115                     });
                    116                 } else {
                    117                     return res.status(201).json({
                    118                         success: true,
                    119                         message: 'Usuario creado correctamente',
                    120                         data: data
                    121                     });
                    122                 }
                    123             });
                    124         },
                    125
                    126         getUserUpdate(req, res) {
                    127             const user = req.body;
                    128             User.update(user, (err, data) => {
                    129                 if (err) {
                    130                     return res.status(501).json({
                    131                         success: false,
                    132                         message: 'Error al actualizar el usuario',
                    133                         error: err
                    134                     });
                    135                 }
                    136                 return res.status(200).json({
                    137                     success: true,
                    138                     message: 'Usuario actualizado',
                    139                     data: data
                    140                 });
                    141             });
                    142         },
                    143
                    144         getUserDelete(req, res) {
                    145             const id = req.params.id;
                    146             User.delete(id, (err, data) => {
                    147                 if (err) {
                    148                     return res.status(501).json({
                    149                         success: false,
                    150                         message: 'Error al eliminar el usuario',
                    151                         error: err
                    152                     });
                    153                 }
                    154                 return res.status(200).json({
                    155                     success: true,
                    156                     message: 'Usuario eliminado',
                    157                     data: data
                    158                 });
                    159             });
                    160         }
                    161     };

                ┌ --------------------------------------------------------------------------------------------------------------------------------------- ┐
                |                                                                                                                                         |
                  EXPLICACIÓN:   
                    
                    ⦿  XXXXXXXXXXXXXXXXXXXXXXXXXXXXX.

                |---------------------------------------------------------------------------------------------------------------------------------------- |
                
                    A.   XXXXXXXXXXXXXXXXXXXXXXXXXXXXX.
                    B.   XXXXXXXXXXXXXXXXXXXXXXXXXXXXX.
                |                                                                                                                                         |
                └ --------------------------------------------------------------------------------------------------------------------------------------- ┘


|------------------------------------------------------------------------------------------------------------------------------------------------------------------------|
|-- 04.07.  Codificar la autenticación por JWT y Roles en 'backend/middlewares/authMiddleware.js': ----------------------------------------------------------------------|
|------------------------------------------------------------------------------------------------------------------------------------------------------------------------|

                      1     const jwt = require('jsonwebtoken');
                      2     const keys = require('../config/keys');
                      3
                      4     function verifyToken(req, res, next) {
                      5         const authHeader = req.headers['authorization'];
                      6         if (!authHeader) {
                      7             return res.status(403).json({
                      8                 success: false,
                      9                 message: 'No se proporcionó un token'
                     10             });
                     11         }
                     12
                     13         const token = authHeader.split(' ')[1];
                     14         if (!token) {
                     15             return res.status(403).json({
                     16                 success: false,
                     17                 message: 'Formato de token inválido'
                     18             });
                     19         }
                     20
                     21         jwt.verify(token, keys.secretOrKey, (err, decoded) => {
                     22             if (err) {
                     23                 return res.status(401).json({
                     24                     success: false,
                     25                     message: 'Token inválido o expirado',
                     26                     error: err
                     27                 });
                     28             }
                     29             req.user = decoded;
                     30             next();
                     31         });
                     32     }
                     33
                     34     function authorizeRoles(roles) {
                     35         return (req, res, next) => {
                     36             if (!req.user || !roles.includes(req.user.role)) {
                     37                 return res.status(403).json({
                     38                     success: false,
                     39                     message: `Acceso denegado: se requiere rol ${roles.join(' o ')}`
                     40                 });
                     41             }
                     42             next();
                     43         };
                     44     }
                     45
                     46     module.exports = {
                     47         verifyToken,
                     48         authorizeRoles
                     49     };

                ┌ --------------------------------------------------------------------------------------------------------------------------------------- ┐
                |                                                                                                                                         |
                  EXPLICACIÓN:   
                    
                    ⦿  XXXXXXXXXXXXXXXXXXXXXXXXXXXXX.

                |---------------------------------------------------------------------------------------------------------------------------------------- |
                
                    A.   XXXXXXXXXXXXXXXXXXXXXXXXXXXXX.
                    B.   XXXXXXXXXXXXXXXXXXXXXXXXXXXXX.
                |                                                                                                                                         |
                └ --------------------------------------------------------------------------------------------------------------------------------------- ┘

|------------------------------------------------------------------------------------------------------------------------------------------------------------------------|
|-- 04.08.  Codificar la ruta de usuario en 'backend/routes/userRoutes.js': ---------------------------------------------------------------------------------------------|
|------------------------------------------------------------------------------------------------------------------------------------------------------------------------|

                      1     const express = require('express');
                      2     const router = express.Router();
                      3     const userController = require('../controllers/userController');
                      4     const { verifyToken, authorizeRoles } = require('../middlewares/authMiddleware');
                      5
                      6     // Rutas públicas
                      7     router.post('/create', userController.register);
                      8     router.post('/login', userController.login);
                      9
                     10     // Rutas protegidas
                     11     router.get('/', verifyToken, authorizeRoles(['admin', 'seller']), userController.getAllUsers);
                     12     router.get('/:id', verifyToken, authorizeRoles(['admin', 'seller']), userController.getUserById);
                     13     router.put('/:id', verifyToken, authorizeRoles(['admin', 'seller']), userController.getUserUpdate);
                     14     router.delete('/delete/:id', verifyToken, authorizeRoles(['admin']), userController.getUserDelete);
                     15
                     16     module.exports = router;

                ┌ --------------------------------------------------------------------------------------------------------------------------------------- ┐
                |                                                                                                                                         |
                  EXPLICACIÓN:   
                    
                    ⦿  XXXXXXXXXXXXXXXXXXXXXXXXXXXXX.

                |---------------------------------------------------------------------------------------------------------------------------------------- |
                
                    A.   XXXXXXXXXXXXXXXXXXXXXXXXXXXXX.
                    B.   XXXXXXXXXXXXXXXXXXXXXXXXXXXXX.
                |                                                                                                                                         |
                └ --------------------------------------------------------------------------------------------------------------------------------------- ┘

|------------------------------------------------------------------------------------------------------------------------------------------------------------------------|
|-- 04.09.  Codificar el servidor en 'backend/server.js': ---------------------------------------------------------------------------------------------------------------|
|------------------------------------------------------------------------------------------------------------------------------------------------------------------------|

                      1     // server.js
                      2     const express = require('express');
                      3     const logger = require('morgan');
                      4     const cors = require('cors');
                      5     const usersRoutes = require('./routes/userRoutes');
                      6
                      7     const app = express();
                      8
                      9     // Middlewares globales
                     10     app.use(logger('dev'));
                     11     app.use(express.json());
                     12     app.use(express.urlencoded({ extended: true }));
                     13     app.use(cors());
                     14
                     15     // Rutas
                     16     app.use('/api/users', usersRoutes);
                     17
                     18     // Endpoints de prueba
                     19     app.get('/', (req, res) => {
                     20         res.send('Ruta raíz del Backend');
                     21     });
                     22
                     23     app.get('/test', (req, res) => {
                     24         res.send('Ruta TEST');
                     25     });
                     26
                     27     // Manejo de errores
                     28     app.use((err, req, res, next) => {
                     29         console.log(err);
                     30         res.status(err.status || 500).send(err.stack);
                     31     });
                     32
                     33     // Exportamos la app para que la use index.js
                     34     module.exports = app;

                ┌ --------------------------------------------------------------------------------------------------------------------------------------- ┐
                |                                                                                                                                         |
                  EXPLICACIÓN:   
                    
                    ⦿  XXXXXXXXXXXXXXXXXXXXXXXXXXXXX.

                |---------------------------------------------------------------------------------------------------------------------------------------- |
                
                    A.   XXXXXXXXXXXXXXXXXXXXXXXXXXXXX.
                    B.   XXXXXXXXXXXXXXXXXXXXXXXXXXXXX.
                |                                                                                                                                         |
                └ --------------------------------------------------------------------------------------------------------------------------------------- ┘

|------------------------------------------------------------------------------------------------------------------------------------------------------------------------|
|-- 04.10.  Codificar el inicio del backend en 'backend/index.js': ------------------------------------------------------------------------------------------------------|
|------------------------------------------------------------------------------------------------------------------------------------------------------------------------|

                      1     const http = require('http');
                      2     const app = require('./server');
                      3     
                      4     const port = process.env.PORT || 3000;
                      5     const host = process.env.HOST || 'localhost';
                      6     
                      7     app.set('port', port);
                      8     
                      9     const server = http.createServer(app);
                     10     
                     11     server.listen(port, host, () => {
                     12       console.log(`Servidor corriendo en http://${host}:${port}`);
                     13     });

                ┌ --------------------------------------------------------------------------------------------------------------------------------------- ┐
                |                                                                                                                                         |
                  EXPLICACIÓN:   
                    
                    ⦿  XXXXXXXXXXXXXXXXXXXXXXXXXXXXX.

                |---------------------------------------------------------------------------------------------------------------------------------------- |
                
                    A.   XXXXXXXXXXXXXXXXXXXXXXXXXXXXX.
                    B.   XXXXXXXXXXXXXXXXXXXXXXXXXXXXX.
                |                                                                                                                                         |
                └ --------------------------------------------------------------------------------------------------------------------------------------- ┘


|------------------------------------------------------------------------------------------------------------------------------------------------------------------------|
|-- 04.11.  Ejecutar el backend: ----------------------------------------------------------------------------------------------------------------------------------------|
|------------------------------------------------------------------------------------------------------------------------------------------------------------------------|

            01. Iniciar el servidor 'backend' desde la terminal de Visual Studio Code.

                    ⦿  PS C:\..\backend> node index.js
            
            02. Debe aparecer en la terminal, texto similar a lo siguiente:
            
                        [dotenv@17.2.3] injecting env (6) from .env -- tip: 🛠️  run anywhere with `dotenvx run -- yourcommand`
                        [dotenv@17.2.3] injecting env (0) from .env -- tip: 🔐 encrypt with Dotenvx: https://dotenvx.com
                        Servidor corriendo en http://localhost:3000
                        Base de datos conectada

                    ⦿  Para detener el servidor, ubíquese en la terminal de Visual Studio Code y presione 'CTRL + C'.



|||\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\|||
|||--------------------------------------------------------------------------------------------------------------------------------------------------------------------|||
|||---------------------------------------------------------------- 05. PRUEBAS DE LA API CON POSTMAN -----------------------------------------------------------------|||
|||--------------------------------------------------------------------------------------------------------------------------------------------------------------------|||
|||\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\|||


|------------------------------------------------------------------------------------------------------------------------------------------------------------------------|
|-- 05.01.  Crear la Colección 'USUARIOS': ------------------------------------------------------------------------------------------------------------------------------|
|------------------------------------------------------------------------------------------------------------------------------------------------------------------------|

            01. Dar click en 'New / Collection'
            
            02. Dar click en 'New Collection' y escribir 'USUARIOS'

|------------------------------------------------------------------------------------------------------------------------------------------------------------------------|
|-- 05.02.  Crear los métodos HTTP (GET, POST, PUT, DELETE) de la Colección 'USUARIOS': ---------------------------------------------------------------------------------|
|------------------------------------------------------------------------------------------------------------------------------------------------------------------------|

            01. Dar click en los tres puntos (...) que están ubicados al lado derecho de 'USUARIOS' (En el Panel Lateral Izquierdo) y seleccionar 'Add request'
            
            02. Dar click en los tres puntos (...) que están ubicados al lado derecho de 'GET New Request' y seleccionar 'Rename', escribir 'raiz'
            
            03. Repetir los pasos 01 y 02 para el método: 'userCreate', 'login', 'usersAll', 'userById', 'userCreate', 'userUpdate' y 'userDelete'

            04. Seleccionar el método 'userCreate' / dar click al control de lista 'GET   ▼' / Seleccionar 'POST' / Presionar 'CTRL + S'
            
            05. Seleccionar el método 'login' / dar click al control de lista 'GET   ▼' / Seleccionar 'POST' / Presionar 'CTRL + S'
            
            06. Seleccionar el método 'userUpdate' / dar click al control de lista 'GET   ▼' / Seleccionar 'PUT' / Presionar 'CTRL + S'
            
            07. Seleccionar el método 'userDelete' / dar click al control de lista 'GET   ▼' / Seleccionar 'DELETE' / Presionar 'CTRL + S'
           
            

|------------------------------------------------------------------------------------------------------------------------------------------------------------------------|
|-- 05.03.  Configurar 'GET raiz': --------------------------------------------------------------------------------------------------------------------------------------|
|------------------------------------------------------------------------------------------------------------------------------------------------------------------------|

            01. Seleccionar el método 'GET raiz'
            
            02. Escribir en el control de texto (al frente de 'GET   ▼' | Enter URL or describe the request to Postbot |) la URL de la API: 'localhost:3000'

            03. Dar click en 'Send'
            
            04. Verificar que la parte inferior aparezca el siguiente código:

                      1   Ruta raíz del Backend

|------------------------------------------------------------------------------------------------------------------------------------------------------------------------|
|-- 05.04.  Configurar 'POST userCreate': -------------------------------------------------------------------------------------------------------------------------------|
|------------------------------------------------------------------------------------------------------------------------------------------------------------------------|

            01. Seleccionar el método 'POST userCreate'
            
            02. Escribir en el control de texto (al frente de 'POST   ▼' | Enter URL or describe the request to Postbot |) la URL de la API 
                (ENDPOINT: /api/users/create): 'localhost:3000/api/users/create'

            03. Dar click en 'Body / raw / JSON'
            
            04. Escribir el siguiente arreglo (clave: valor) en formato JSON:

                      1   {
                      2     "email": "user@sistema.com",
                      3     "name": "Usuario",
                      4     "lastname": "Sistema",
                      5     "phone": "3103103101",
                      6     "image": "yyyy",
                      7     "password": "12345"
                      8   }
            
            05. Dar click en 'Send'
            
            06. Verificar que la parte inferior aparezca el siguiente código:

                      1    {
                      2        "success": true,
                      3        "message": "Usuario creado correctamente",
                      4        "data": {
                      5            "id": 1,
                      6            "email": "user@sistema.com",
                      7            "name": "Usuario",
                      8            "lastname": "Sistema",
                      9            "phone": "3103103101",
                     10            "image": "yyyy",
                     11            "password": "12345",
                     12            "role": "user"
                     13        }
                     14    }

            07. Ir a 'http://localhost/phpmyadmin/', para verificar que en la base de datos 'db_node' (tabla 'users'), se haya creado el registro
              
            08. Repetir los pasos 4, 5 y 7 con el siguiente arreglo (clave: valor) en formato JSON:

                      1    {
                      2        "email": "customer@sistema.com",
                      3        "name": "Customer",
                      4        "lastname": "Sistema",
                      5        "phone": "3113113111",
                      6        "image": "yyyy",
                      7        "role": "customer",
                      8        "password": "12345"
                      9    }              
              
            09. Verificar que la parte inferior aparezca el siguiente código:

                      1    {
                      2        "success": true,
                      3        "message": "Usuario creado correctamente",
                      4        "data": {
                      5            "id": 2,
                      6            "email": "customer@sistema.com",
                      7            "name": "Customer",
                      8            "lastname": "Sistema",
                      9            "phone": "3113113111",
                     10            "image": "yyyy",
                     11            "role": "customer",
                     12            "password": "12345"
                     13        }
                     14    }

            10. Repetir los pasos 4, 5 y 7 con el siguiente arreglo (clave: valor) en formato JSON:

                      1    {
                      2        "email": "seller@sistema.com",
                      3        "name": "Seller",
                      4        "lastname": "Sistema",
                      5        "phone": "3123123121",
                      6        "image": "yyyy",
                      7        "role": "seller",
                      8        "password": "12345"
                      9    }              
              
            11. Verificar que la parte inferior aparezca el siguiente código:

                      1    {
                      2        "success": true,
                      3        "message": "Usuario creado correctamente",
                      4        "data": {
                      5            "id": 3,
                      6            "email": "seller@sistema.com",
                      7            "name": "Seller",
                      8            "lastname": "Sistema",
                      9            "phone": "3123123121",
                     10            "image": "yyyy",
                     11            "role": "seller",
                     12            "password": "12345"
                     13        }
                     14    }
            
            12. Repetir los pasos 4, 5 y 7 con el siguiente arreglo (clave: valor) en formato JSON:

                      1    {
                      2        "email": "admin@sistema.com",
                      3        "name": "Admin",
                      4        "lastname": "Sistema",
                      5        "phone": "3133133131",
                      6        "image": "yyyy",
                      7        "role": "admin",
                      8        "password": "12345"
                      9    }              
              
            13. Verificar que la parte inferior aparezca el siguiente código:

                      1    {
                      2        "success": true,
                      3        "message": "Usuario creado correctamente",
                      4        "data": {
                      5            "id": 4,
                      6            "email": "admin@sistema.com",
                      7            "name": "Admin",
                      8            "lastname": "Sistema",
                      9            "phone": "3133133131",
                     10            "image": "yyyy",
                     11            "role": "admin",
                     12            "password": "12345"
                     13        }
                     14    }
            
            14. Repetir los pasos 4, 5 y 7 con el siguiente arreglo (clave: valor) en formato JSON:

                      1    {
                      2        "email": "other@sistema.com",
                      3        "name": "Other",
                      4        "lastname": "Sistema",
                      5        "phone": "3143143141",
                      6        "image": "yyyy",
                      7        "role": "other",
                      8        "password": "12345"
                      9    }              
              
            15. Verificar que la parte inferior aparezca el siguiente código:

                      1    {
                      2        "success": true,
                      3        "message": "Usuario creado correctamente",
                      4        "data": {
                      5            "id": 5,
                      6            "email": "other@sistema.com",
                      7            "name": "Other",
                      8            "lastname": "Sistema",
                      9            "phone": "3143143141",
                     10            "image": "yyyy",
                     11            "role": "other",
                     12            "password": "12345"
                     13        }
                     14    }

                ┌ --------------------------------------------------------------------------------------------------------------------------------------- ┐
                |                                                                                                                                         |
                  NOTA:   
                    
                    ⦿  Note que 'http://localhost/phpmyadmin/', en la base de datos 'db_node' (tabla 'users'), en el registro creado, en la columna
                        'role', aparece 'user' en lugar de 'other'; esto se debe a que en 'backend/models/user.js' en las líneas 48 y 49, se está 
                        validando que únicamente los roles pueden ser: 'admin', 'seller', 'customer', 'user'; de lo contrario escribe 'user'
                |                                                                                                                                         |
                └ --------------------------------------------------------------------------------------------------------------------------------------- ┘


|------------------------------------------------------------------------------------------------------------------------------------------------------------------------|
|-- 05.05.  Configurar 'POST login': ------------------------------------------------------------------------------------------------------------------------------------|
|------------------------------------------------------------------------------------------------------------------------------------------------------------------------|

            01. Seleccionar el método 'POST login'
            
            02. Escribir en el control de texto (al frente de 'POST   ▼' | Enter URL or describe the request to Postbot |) la URL de la API 
                (ENDPOINT: /api/users/login): 'localhost:3000/api/users/login'

            03. Dar click en 'Body / raw / JSON'
            
            04. Escribir el siguiente arreglo (clave: valor) en formato JSON:

                      1    {
                      2        "email": "user@sistema.com",
                      3        "password": "12345"
                      4    }
            
            05. Dar click en 'Send'
            
            06. Verificar que la parte inferior aparezca el siguiente código:

                      1    {
                      2        "success": true,
                      3        "message": "Usuario autenticado",
                      4        "data": {
                      5            "id": 1,
                      6            "email": "user@gmail.com",
                      7            "name": "Usuario",
                      8            "lastname": "Sistema",
                      9            "image": "yyyy",
                     10            "phone": "3103103101",
                     11            "role": "user",
                     12            "session_token": "JWT eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.
                                                     eyJpZCI6MSwiZW1haWwiOiJ1c2VyQGdtYWlsLmNvbSIsInJvbGUiOiJ1c2VyIiwiaWF0IjoxNzU5MzcwNTE4LCJleHAiOjE3NTkzNzQxMTh9.
                                                     2oJDO0HIsol2TKHD4JBzsrRuXFeCv76e7eqJCzKOpEY"
                     13        }
                     14    }

            07. Copiar todo el código que está entre comillas del "session_token" de la línea 12

|------------------------------------------------------------------------------------------------------------------------------------------------------------------------|
|-- 05.06.  Configurar 'GET usersAll': ----------------------------------------------------------------------------------------------------------------------------------|
|------------------------------------------------------------------------------------------------------------------------------------------------------------------------|

            01. Seleccionar el método 'GET usersAll'
            
            02. Escribir en el control de texto (al frente de 'GET   ▼' | Enter URL or describe the request to Postbot |) la URL de la API 
                (ENDPOINT: /api/users): 'localhost:3000/api/users'

            03. Dar click en 'Send'
            
            04. En la parte inferior debe aparecer el siguiente código:

                      1    {
                      2        "success": false,
                      3        "message": "No se proporcionó un token"
                      4    }

            05. Dar click en 'Headers', en 'Key' escribir 'Authorization' y en 'Value' pegar el 'JWT eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...' 

            06. Dar click en 'Send'

            07. En la parte inferior debe aparecer el siguiente código:

                      1    {
                      2        "success": false,
                      3        "message": "Acceso denegado: se requiere rol admin o seller"
                      4    }
            
            08. Repetir los pasos 4, 5, 6 y 7 del apartado: '05.05.  Configurar 'POST login'' para loguearse como 'customer':

                      1    {
                      2        "email": "customer@sistema.com",
                      3        "password": "12345"
                      4    }
            
            09. Repetir los pasos 5 y 6 de este mismo apartado. En la parte inferior debe aparecer el siguiente còdigo:

                      1    {
                      2        "success": false,
                      3        "message": "Acceso denegado: se requiere rol admin o seller"
                      4    }

            10. Repetir los pasos 4, 5, 6 y 7 del apartado: '05.05.  Configurar 'POST login'' para loguearse como 'seller':

                      1    {
                      2        "email": "seller@sistema.com",
                      3        "password": "12345"
                      4    }
            
            11. Repetir los pasos 5 y 6 de este mismo apartado. En la parte inferior debe aparecer el siguiente còdigo:

                      1    {
                      2        "success": true,
                      3        "message": "Lista de usuarios",
                      4        "data": [
                      5            {
                      6                "id": 1,
                      7                "email": "user@sistema.com",
                      8                "name": "User",
                      9                "lastname": "Sistema",
                     10                "phone": "3103103101",
                     11                "image": "yyyy",
                     12                "role": "user",
                     13                "created_at": "2025-10-02T09:15:59.000Z",
                     14                "updated_at": "2025-10-02T09:15:59.000Z"
                     15            },
                     16            {
                     17                "id": 2,
                     18                "email": "customer@sistema.com",
                     19                "name": "Customer",
                     20                "lastname": "Sistema",
                     21                "phone": "3113113111",
                     22                "image": "yyyy",
                     23                "role": "customer",
                     24                "created_at": "2025-10-02T09:17:09.000Z",
                     25                "updated_at": "2025-10-02T09:17:09.000Z"
                     26            },
                     27            {
                     28                "id": 3,
                     29                "email": "seller@sistema.com",
                     30                "name": "Seller",
                     31                "lastname": "Sistema",
                     32                "phone": "3113113111",
                     33                "image": "yyyy",
                     34                "role": "seller",
                     35                "created_at": "2025-10-02T09:26:11.000Z",
                     36                "updated_at": "2025-10-02T09:26:11.000Z"
                     37            },
                     38            {
                     39                "id": 4,
                     40                "email": "admin@sistema.com",
                     41                "name": "Admin",
                     42                "lastname": "Sistema",
                     43                "phone": "3133133131",
                     44                "image": "yyyy",
                     45                "role": "admin",
                     46                "created_at": "2025-10-02T09:27:19.000Z",
                     47                "updated_at": "2025-10-02T09:27:19.000Z"
                     48            },
                     49            {
                     50                "id": 5,
                     51                "email": "other@sistema.com",
                     52                "name": "Other",
                     53                "lastname": "Sistema",
                     54                "phone": "3143143141",
                     55                "image": "yyyy",
                     56                "role": "user",
                     57                "created_at": "2025-10-02T09:29:16.000Z",
                     58                "updated_at": "2025-10-02T09:29:16.000Z"
                     59            }
                     60        ]
                     61    }

                ┌ --------------------------------------------------------------------------------------------------------------------------------------- ┐
                |                                                                                                                                         |
                  NOTA:   
                    
                    ⦿  Como puede notar, el 'seller' puede obtener todos los usuarios del sistema 'GET usersAll'. esto se debe a que en
                        'backend/routes/userRoutes.js' en la línea 11, se está validando que únicamente los roles autorizados para esta acción sean:
                        'admin' o 'seller'
                |                                                                                                                                         |
                └ --------------------------------------------------------------------------------------------------------------------------------------- ┘


|------------------------------------------------------------------------------------------------------------------------------------------------------------------------|
|-- 05.07.  Configurar 'GET userById': ----------------------------------------------------------------------------------------------------------------------------------|
|------------------------------------------------------------------------------------------------------------------------------------------------------------------------|

            01. Seleccionar el método 'GET userById'
            
            02. Escribir en el control de texto (al frente de 'GET   ▼' | Enter URL or describe the request to Postbot |) la URL de la API 
                (ENDPOINT: /api/users/:id): 'localhost:3000/api/users/2'

            03. Copiar todo el código que está entre comillas del "session_token" de la línea 12, de 'POST login'
            
            04. Dar click en 'Headers', en 'Key' escribir 'Authorization' y en 'Value' pegar el 'JWT eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...' 

            05. Dar click en 'Send'
            
            06. Verificar que la parte inferior aparezca el siguiente código:

                      1    {
                      2        "success": true,
                      3        "message": "Usuario encontrado",
                      4        "data": {
                      5            "id": 2,
                      6            "email": "customer@sistema.com",
                      7            "name": "Customer",
                      8            "lastname": "Sistema",
                      9            "image": "yyyy",
                     10            "phone": "3113113111",
                     11            "role": "customer",
                     12            "password": "$2b$10$lW6ZqX.R8wlHkyYUFQmx8.ElOhbnyfm4HOVf3P6MUB3LCknjUFG8m"
                     13        }
                     14    }


|------------------------------------------------------------------------------------------------------------------------------------------------------------------------|
|-- 05.08.  Configurar 'POST userUpdate': -------------------------------------------------------------------------------------------------------------------------------|
|------------------------------------------------------------------------------------------------------------------------------------------------------------------------|

            01. Seleccionar el método 'POST userUpdates'
            
            02. Escribir en el control de texto (al frente de 'GET   ▼' | Enter URL or describe the request to Postbot |) la URL de la API 
                (ENDPOINT: /api/users/update): 'localhost:3000/api/users/update'

            03. Copiar todo el código que está entre comillas del "session_token" de la línea 12, de 'POST login'
            
            04. Dar click en 'Headers', en 'Key' escribir 'Authorization' y en 'Value' pegar el 'JWT eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...' 

            05. Dar click en 'Body / raw / JSON'

            06. Escribir el siguiente arreglo (clave: valor) en formato JSON:

                      1    {
                      2      "id": "2",
                      3      "email": "customer_modified@modificado.com",
                      4      "name": "Customer",
                      5      "lastname": "Modified",
                      6      "phone": "3163163161",
                      7      "image": "yyyy",
                      8      "password": "12345"
                      9    }
            
            07. Dar click en 'Send'
            
            08. Verificar que la parte inferior aparezca el siguiente código:

                      1    {
                      2        "success": true,
                      3        "message": "Usuario actualizado",
                      4        "data": {
                      5            "id": "2",
                      6            "email": "customer_modified@modificado.com",
                      7            "name": "Customer",
                      8            "lastname": "Modified",
                      9            "phone": "3163163161",
                     10            "image": "yyyy",
                     11            "password": "12345"
                     12        }
                     13    }

            09. Ir a 'http://localhost/phpmyadmin/', para verificar que en la base de datos 'db_node' (tabla 'users'), se haya actualizado el registro

|------------------------------------------------------------------------------------------------------------------------------------------------------------------------|
|-- 05.09.  Configurar 'DELETE userDelete': -----------------------------------------------------------------------------------------------------------------------------|
|------------------------------------------------------------------------------------------------------------------------------------------------------------------------|
            
            01. Seleccionar el método 'DELETE userDelete'
            
            02. Escribir en el control de texto (al frente de 'GET   ▼' | Enter URL or describe the request to Postbot |) la URL de la API 
                (ENDPOINT: /api/users/delete/:id): 'localhost:3000/api/users/delete/5'

            03. Copiar todo el código que está entre comillas del "session_token" de la línea 12, de 'POST login'
            
            04. Dar click en 'Headers', en 'Key' escribir 'Authorization' y en 'Value' pegar el 'JWT eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...' 

            05. Dar click en 'Send'
            
            07. En la parte inferior aparece el siguiente código:

                      1    {
                      2        "success": false,
                      3        "message": "Acceso denegado: se requiere rol admin"
                      4    }

            07. Repetir los pasos 4, 5, 6 y 7 del apartado: '05.05.  Configurar 'POST login'' para loguearse como 'admin':

                      1    {
                      2        "email": "admin@sistema.com",
                      3        "password": "12345"
                      4    }
            
            08. Repetir los pasos 3, 4 y 5 de este mismo apartado. En la parte inferior debe aparecer el siguiente còdigo:

                      1    {
                      2        "success": true,
                      3        "message": "Usuario eliminado",
                      4        "data": {
                      5            "fieldCount": 0,
                      6            "affectedRows": 1,
                      7            "insertId": 0,
                      8            "serverStatus": 2,
                      9            "warningCount": 0,
                     10            "message": "",
                     11            "protocol41": true,
                     12            "changedRows": 0
                     13        }
                     14    }


            09. Ir a 'http://localhost/phpmyadmin/', para verificar que en la base de datos 'db_node' (tabla 'users'), se haya eliminado el registro


|||\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\|||
|||--------------------------------------------------------------------------------------------------------------------------------------------------------------------|||
|||------------------------------------------------------------------------------ ANEXOS ------------------------------------------------------------------------------|||
||| ------------------------------------------------------------------------- TENER EN CUENTA -------------------------------------------------------------------------|||
|||--------------------------------------------------------------------------------------------------------------------------------------------------------------------|||
|||\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\|||

|------------------------------------------------------------------------------------------------------------------------------------------------------------------------|
|-- AX_01.  Subir el proyecto a un repositorio 'Github': ----------------------------------------------------------------------------------------------------------------|
|------------------------------------------------------------------------------------------------------------------------------------------------------------------------|

            Para evitar confusiones y seguir los pasos correctamente, la carpeta raíz del proyecto se llamará 'proyecto'.
            
            01. Verificar que no haya una cuenta de 'Github' asociada al computador, para ello, debe abrir el 'Panel de Control', dar click en 'Cuentas 
                de usuario / Administrar credenciales de Windows'. Si hay una cuenta asociada 'git:https://github.com', dar click sobre la cuenta y click
                sobre la opción 'Quitar'. 
            
                    ⦿  De no funcionar este método porque no tiene acceso al Panel de control, pruebe abriendo el 'Windows PowerShell' y digite el 
                         siguiente comando:

                         PS C:\..\..> echo "protocol=https`nhost=github.com`n" | git credential-manager erase
            
            02. Abrir su cuenta de 'Github' y en la parte superior derecha, dar click al 'Nombre de su cuenta / Your Repositories'. Dar click en 'New'.
                En el control de texto 'Repository name', escribir el nombre de la carpeta raíz de su proyecto (ejemplo, 'proyecto'. La carpeta raíz no debe 
                tener espacios, ni caracteres compuesto, ni caracteres especiales) y dar click en 'Create Repository'.

                    ⦿  Si no tiene cuenta en 'GitHub', debe crear una.
            
            03. Click derecho sobre la carpeta raíz (ejemplo, 'proyecto') y seleccionar la opción 'Open Git Bash here'; si no se 
                encuentra la opción, hay que instalar 'Git'.
            
            04. En el 'Git Bash' escribir lo siguiente:

                    $ git config --global user.name "nombre de su cuenta"
                    $ git config --global user.email "correo de su cuenta"

                    $ git init
                    $ git branch -M main
                    $ git remote add origin https://github.com/SenaProfeAlbeiro/proyecto.git
                    $ git add .
                    $ git commit -m "Subiendo Proyecto"
                    $ git push -u origin main

            05. Va a aparecer una ventana denominada 'Connect to Github', dar click en la opción 'Sign in with your browser', dar click en 'Authentication 
                Succeeded'. Verificar que se haya abierto en el navegador en donde tiene la cuenta activa, de lo contrario hay que escribir nuevamente las
                credenciales de 'Github'. En el 'Git Bash' debe aparecer texto similar al siguiente:

                    Enumerating objects: 3, done.
                    Counting objects: 100% (3/3), done.
                    Writing objects: 100% (3/3), 226 bytes | 226.00 KiB/s, done.
                    Total 3 (delta 0), reused 0 (delta 0), pack-reused 0 (from 0)
                    To https://github.com/SenaProfeAlbeiro/proyecto.git
                    * [new branch]      main -> main
                    branch 'main' set up to track 'origin/main'.
            
            06. Actualizar la ventana del navegador donde se encuentra abierta su cuenta de 'Github'
            
            07. Para actualizar la información del proyecto en 'Github', en el 'Git bash' escribir los siguientes comandos:

                    $ git add .
                    $ git commit -m "Comentario del cambio"
                    $ git push

|------------------------------------------------------------------------------------------------------------------------------------------------------------------------|
|-- AX_02.  Clonar un proyecto 'Github': --------------------------------------------------------------------------------------------------------------------------------|
|------------------------------------------------------------------------------------------------------------------------------------------------------------------------|

            01. Abrir su cuenta de 'Github' y en la parte superior derecha, dar click al 'Nombre de su cuenta / Your Repositories'. 

            02. Dar click al proyecto que desea clonar, en el caso del ejemplo es 'proyecto'.

            03. Dar click en la opción '<> Code / Copy url to clipboard'.

            04. Ir a una carpeta de Windows, por ejemplo, en el 'C:\xampp\htdocs' (en el caso del ejemplo, 'proyecto').

            05. Click derecho sobre el área de trabajo y seleccionar la opción 'Open Git Bash here'; si no se encuentra la opción, hay que instalar 
                'Git'.
 
            06. En el 'Git Bash' pegar el repositorio clonado de 'Github' con 'CTRL + INSERT', quedando como sigue:

                         $ git clone https://github.com/SenaProfeAlbeiro/proyecto.git

                    ⦿  Si el proyecto ya se encuentra en el computador, puede utilizar el siguiente comando para actualizar la información:
                    
                         $ git pull
            
            07. Abrir el proyecto en Visual Studio Code.


|------------------------------------------------------------------------------------------------------------------------------------------------------------------------|
|-- AX_03.  Cambiar los puertos de 'Apache' en 'XAMPP': -----------------------------------------------------------------------------------------------------------------|
|------------------------------------------------------------------------------------------------------------------------------------------------------------------------|
                         
            01. En el Panel de control de XAMPP y en la misma línea del servicio 'Apache' dar click en 'Config / Apache (httpd.conf)'.
            
            02. Se abrirá un 'Bloc de Notas'. Dar click en la opción 'Edición / Buscar...' (o presionar las teclas 'CTRL + B').
            
            03. En la ventana emergente y en el control de texto 'Buscar: ', escribir '80' y dar click en 'Buscar siguiente'.
            
            04. Reemplazar todos los valores donde se encentre el puerto '80' con el puerto nuevo de trabajo, por ejemplo, '8080'. Dar click en 
                'cancelar' y guardar los cambios en el archivo.

            05. En el Panel de control de XAMPP dar click en 'start' de 'Apache' para iniciar el servicio.
            
            06. Comprobar que quedó de la forma correcta a través del navegador, con el siguiente enlace:

                         http://localhost:8080/proyecto/
            

|------------------------------------------------------------------------------------------------------------------------------------------------------------------------|
|-- AX_04.  Cambiar los puertos de 'MySQL' en 'XAMPP': ------------------------------------------------------------------------------------------------------------------|
|------------------------------------------------------------------------------------------------------------------------------------------------------------------------|

            01. En el Panel de control de XAMPP y en la misma línea del servicio 'MySQL' dar click en 'Config / my.ini'.

            02. Se abrirá un 'Bloc de Notas'. Dar click en la opción 'Edición / Buscar...' (o presionar las teclas 'CTRL + B').
            
            03. En la ventana emergente y en el control de texto 'Buscar: ', escribir '3306' y dar click en 'Buscar siguiente'.

            04. Reemplazar todos los valores donde se encentre el puerto '3306' con el puerto nuevo de trabajo, por ejemplo, '3308'. Dar click en 
                'cancelar' y guardar los cambios en el archivo.

            05. En el Panel de control de XAMPP y en la misma línea del servicio 'Apache' dar click en 'Config / Apache (php.ini)'.

            06. Se abrirá un 'Bloc de Notas'. Dar click en la opción 'Edición / Buscar...' (o presionar las teclas 'CTRL + B').

            07. En la ventana emergente y en el control de texto 'Buscar: ', escribir '3306' y dar click en 'Buscar siguiente'.

            08. Reemplazar todos los valores donde se encentre el puerto '3306' con el puerto nuevo de trabajo, por ejemplo, '3308'. Dar click en 
                'cancelar' y guardar los cambios en el archivo.
        
            09. En el Panel de control de XAMPP y en la misma línea del servicio 'Apache' dar click en 'Config / phpMyAdmin (config.inc.php)'.

            10. Buscar la línea '$cfg['Servers'][$i]['host'] = '127.0.0.1;' y agregar el puerto nuevo '3308' de la siguiente forma:
                         
                         $cfg['Servers'][$i]['host'] = '127.0.0.1:3308';

            11. En el Panel de control de XAMPP dar click en 'start' de 'MySQL' para iniciar el servicio.

            12. Comprobar que quedó de la forma correcta a través del navegador, con el siguiente enlace:

                         http://localhost:8080/phpmyadmin/            


|------------------------------------------------------------------------------------------------------------------------------------------------------------------------|
|-- AX_05.  Puesta en marcha del proyecto: ------------------------------------------------------------------------------------------------------------------------------|
|------------------------------------------------------------------------------------------------------------------------------------------------------------------------|

            01. Garantizar el ambiente de desarrollo (Ver apartado 01. ENTORNO DE DESARROLLO).
            
            02. Clonar el proyecto desde github en 'C:\xampp\htdocs' (Ver apartado AX_02. Clonar un proyecto 'Github').
            
            03. Abrir el proyecto en Visual Studio Code.
            
            04. Abrir 'XAMPP' y ejecutar los servicios de 'Apache' y 'MySQL'.

            05. Abrir un navegador (preferiblemente Google Chrome) a través de los siguientes enlaces:
            
                    http://localhost/proyecto/

                    http://localhost/phpmyadmin/            
            
                    ⦿  Si el puerto de 'Apache' en 'XAMPP' es diferente al '80' y si es posible, cambiar el puerto al '80' (Ver apartado AX_03. 
                         Cambiar los puertos de 'Apache' en 'XAMPP'); si no es posible, agregar el puerto al 'localhost', por ejemplo, si el puerto 
                         es '8080' entonces debería quedar así:

                         http://localhost:8080/proyecto/

                         http://localhost:8080/phpmyadmin/            
            
                    ⦿  Si el puerto de 'MySQL' en 'XAMPP' es diferente al '3306' y si es posible, cambiar el puerto al '3306' (Ver apartado AX_04. 
                         Cambiar los puertos de 'MySQL' en 'XAMPP').
                                    
            06. Subir la base de datos (Ver el apartado 03. BASE DE DATOS).

            07. Comprobar que se ejecute correctamente la aplicación.